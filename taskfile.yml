# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: 3

silent: true

vars:
  PACKAGES:
    sh: go list github.com/brunoribeiro127/gobin/... | grep -v mocks
  INTERNAL_PACKAGES:
    sh: go list github.com/brunoribeiro127/gobin/internal... | grep -v mocks

tasks:
  build:
    cmd: CGO_ENABLED=0 go build -v -trimpath -ldflags="-s -w" -o ./bin/gobin github.com/brunoribeiro127/gobin/cmd/gobin

  check:
    deps:
      - fmt
      - vet
      - lint
      - build
      - test
      - vulncheck

  clean:
    cmd: rm -rf ./bin ./coverage ./dist

  coverage:
    cmd: |
        if command -v open >/dev/null; then
          open coverage/coverage.html
        else
          xdg-open coverage/coverage.html
        fi

  fmt:
    cmd: go fmt ./...

  install:
    cmd: CGO_ENABLED=0 go install -trimpath -ldflags="-s -w" github.com/brunoribeiro127/gobin/cmd/gobin

  install-dev-tools:
    cmds:
      - go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.3.1
      - go install github.com/vektra/mockery/v3@v3.5.2
      - go install golang.org/x/vuln/cmd/govulncheck@v1.1.4

  lint:
    cmd: golangci-lint run

  mockery:
    cmd: mockery

  run:
    cmd: go run cmd/gobin/main.go {{.CLI_ARGS}}

  test:
    cmds:
      - mkdir -p coverage
      - go clean -testcache
      - go test -coverprofile=coverage/coverage.txt -covermode count {{ catLines .INTERNAL_PACKAGES }}
      - go tool cover -func coverage/coverage.txt
      - go tool cover -html coverage/coverage.txt -o coverage/coverage.html

  tidy:
    cmd: go mod tidy

  vet:
    cmd: go vet {{catLines .PACKAGES }}

  vulncheck:
    cmd: govulncheck ./...
