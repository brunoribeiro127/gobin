// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewExecRun creates a new instance of ExecRun. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecRun(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecRun {
	mock := &ExecRun{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ExecRun is an autogenerated mock type for the ExecRun type
type ExecRun struct {
	mock.Mock
}

type ExecRun_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecRun) EXPECT() *ExecRun_Expecter {
	return &ExecRun_Expecter{mock: &_m.Mock}
}

// InjectEnv provides a mock function for the type ExecRun
func (_mock *ExecRun) InjectEnv(env ...string) {
	if len(env) > 0 {
		_mock.Called(env)
	} else {
		_mock.Called()
	}

	return
}

// ExecRun_InjectEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InjectEnv'
type ExecRun_InjectEnv_Call struct {
	*mock.Call
}

// InjectEnv is a helper method to define mock.On call
//   - env ...string
func (_e *ExecRun_Expecter) InjectEnv(env ...interface{}) *ExecRun_InjectEnv_Call {
	return &ExecRun_InjectEnv_Call{Call: _e.mock.On("InjectEnv",
		append([]interface{}{}, env...)...)}
}

func (_c *ExecRun_InjectEnv_Call) Run(run func(env ...string)) *ExecRun_InjectEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		var variadicArgs []string
		if len(args) > 0 {
			variadicArgs = args[0].([]string)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *ExecRun_InjectEnv_Call) Return() *ExecRun_InjectEnv_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecRun_InjectEnv_Call) RunAndReturn(run func(env ...string)) *ExecRun_InjectEnv_Call {
	_c.Run(run)
	return _c
}

// Run provides a mock function for the type ExecRun
func (_mock *ExecRun) Run() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecRun_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type ExecRun_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *ExecRun_Expecter) Run() *ExecRun_Run_Call {
	return &ExecRun_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *ExecRun_Run_Call) Run(run func()) *ExecRun_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecRun_Run_Call) Return(err error) *ExecRun_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecRun_Run_Call) RunAndReturn(run func() error) *ExecRun_Run_Call {
	_c.Call.Return(run)
	return _c
}
