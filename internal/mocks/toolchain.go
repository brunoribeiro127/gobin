// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"debug/buildinfo"

	"github.com/brunoribeiro127/gobin/internal"
	mock "github.com/stretchr/testify/mock"
	"golang.org/x/mod/modfile"
)

// NewToolchain creates a new instance of Toolchain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewToolchain(t interface {
	mock.TestingT
	Cleanup(func())
}) *Toolchain {
	mock := &Toolchain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Toolchain is an autogenerated mock type for the Toolchain type
type Toolchain struct {
	mock.Mock
}

type Toolchain_Expecter struct {
	mock *mock.Mock
}

func (_m *Toolchain) EXPECT() *Toolchain_Expecter {
	return &Toolchain_Expecter{mock: &_m.Mock}
}

// GetBuildInfo provides a mock function for the type Toolchain
func (_mock *Toolchain) GetBuildInfo(path string) (*buildinfo.BuildInfo, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetBuildInfo")
	}

	var r0 *buildinfo.BuildInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*buildinfo.BuildInfo, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *buildinfo.BuildInfo); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*buildinfo.BuildInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Toolchain_GetBuildInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBuildInfo'
type Toolchain_GetBuildInfo_Call struct {
	*mock.Call
}

// GetBuildInfo is a helper method to define mock.On call
//   - path string
func (_e *Toolchain_Expecter) GetBuildInfo(path interface{}) *Toolchain_GetBuildInfo_Call {
	return &Toolchain_GetBuildInfo_Call{Call: _e.mock.On("GetBuildInfo", path)}
}

func (_c *Toolchain_GetBuildInfo_Call) Run(run func(path string)) *Toolchain_GetBuildInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Toolchain_GetBuildInfo_Call) Return(v *buildinfo.BuildInfo, err error) *Toolchain_GetBuildInfo_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *Toolchain_GetBuildInfo_Call) RunAndReturn(run func(path string) (*buildinfo.BuildInfo, error)) *Toolchain_GetBuildInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestModuleVersion provides a mock function for the type Toolchain
func (_mock *Toolchain) GetLatestModuleVersion(module string) (string, string, error) {
	ret := _mock.Called(module)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestModuleVersion")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return returnFunc(module)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(module)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) string); ok {
		r1 = returnFunc(module)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(module)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// Toolchain_GetLatestModuleVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestModuleVersion'
type Toolchain_GetLatestModuleVersion_Call struct {
	*mock.Call
}

// GetLatestModuleVersion is a helper method to define mock.On call
//   - module string
func (_e *Toolchain_Expecter) GetLatestModuleVersion(module interface{}) *Toolchain_GetLatestModuleVersion_Call {
	return &Toolchain_GetLatestModuleVersion_Call{Call: _e.mock.On("GetLatestModuleVersion", module)}
}

func (_c *Toolchain_GetLatestModuleVersion_Call) Run(run func(module string)) *Toolchain_GetLatestModuleVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Toolchain_GetLatestModuleVersion_Call) Return(s string, s1 string, err error) *Toolchain_GetLatestModuleVersion_Call {
	_c.Call.Return(s, s1, err)
	return _c
}

func (_c *Toolchain_GetLatestModuleVersion_Call) RunAndReturn(run func(module string) (string, string, error)) *Toolchain_GetLatestModuleVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetModuleFile provides a mock function for the type Toolchain
func (_mock *Toolchain) GetModuleFile(module string, version string) (*modfile.File, error) {
	ret := _mock.Called(module, version)

	if len(ret) == 0 {
		panic("no return value specified for GetModuleFile")
	}

	var r0 *modfile.File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*modfile.File, error)); ok {
		return returnFunc(module, version)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *modfile.File); ok {
		r0 = returnFunc(module, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modfile.File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(module, version)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Toolchain_GetModuleFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModuleFile'
type Toolchain_GetModuleFile_Call struct {
	*mock.Call
}

// GetModuleFile is a helper method to define mock.On call
//   - module string
//   - version string
func (_e *Toolchain_Expecter) GetModuleFile(module interface{}, version interface{}) *Toolchain_GetModuleFile_Call {
	return &Toolchain_GetModuleFile_Call{Call: _e.mock.On("GetModuleFile", module, version)}
}

func (_c *Toolchain_GetModuleFile_Call) Run(run func(module string, version string)) *Toolchain_GetModuleFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Toolchain_GetModuleFile_Call) Return(file *modfile.File, err error) *Toolchain_GetModuleFile_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *Toolchain_GetModuleFile_Call) RunAndReturn(run func(module string, version string) (*modfile.File, error)) *Toolchain_GetModuleFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetModuleOrigin provides a mock function for the type Toolchain
func (_mock *Toolchain) GetModuleOrigin(module string, version string) (*internal.ModuleOrigin, error) {
	ret := _mock.Called(module, version)

	if len(ret) == 0 {
		panic("no return value specified for GetModuleOrigin")
	}

	var r0 *internal.ModuleOrigin
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*internal.ModuleOrigin, error)); ok {
		return returnFunc(module, version)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *internal.ModuleOrigin); ok {
		r0 = returnFunc(module, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.ModuleOrigin)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(module, version)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Toolchain_GetModuleOrigin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModuleOrigin'
type Toolchain_GetModuleOrigin_Call struct {
	*mock.Call
}

// GetModuleOrigin is a helper method to define mock.On call
//   - module string
//   - version string
func (_e *Toolchain_Expecter) GetModuleOrigin(module interface{}, version interface{}) *Toolchain_GetModuleOrigin_Call {
	return &Toolchain_GetModuleOrigin_Call{Call: _e.mock.On("GetModuleOrigin", module, version)}
}

func (_c *Toolchain_GetModuleOrigin_Call) Run(run func(module string, version string)) *Toolchain_GetModuleOrigin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Toolchain_GetModuleOrigin_Call) Return(moduleOrigin *internal.ModuleOrigin, err error) *Toolchain_GetModuleOrigin_Call {
	_c.Call.Return(moduleOrigin, err)
	return _c
}

func (_c *Toolchain_GetModuleOrigin_Call) RunAndReturn(run func(module string, version string) (*internal.ModuleOrigin, error)) *Toolchain_GetModuleOrigin_Call {
	_c.Call.Return(run)
	return _c
}

// Install provides a mock function for the type Toolchain
func (_mock *Toolchain) Install(pkg string, version string) error {
	ret := _mock.Called(pkg, version)

	if len(ret) == 0 {
		panic("no return value specified for Install")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(pkg, version)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Toolchain_Install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Install'
type Toolchain_Install_Call struct {
	*mock.Call
}

// Install is a helper method to define mock.On call
//   - pkg string
//   - version string
func (_e *Toolchain_Expecter) Install(pkg interface{}, version interface{}) *Toolchain_Install_Call {
	return &Toolchain_Install_Call{Call: _e.mock.On("Install", pkg, version)}
}

func (_c *Toolchain_Install_Call) Run(run func(pkg string, version string)) *Toolchain_Install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Toolchain_Install_Call) Return(err error) *Toolchain_Install_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Toolchain_Install_Call) RunAndReturn(run func(pkg string, version string) error) *Toolchain_Install_Call {
	_c.Call.Return(run)
	return _c
}

// VulnCheck provides a mock function for the type Toolchain
func (_mock *Toolchain) VulnCheck(path string) ([]internal.Vulnerability, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for VulnCheck")
	}

	var r0 []internal.Vulnerability
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]internal.Vulnerability, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []internal.Vulnerability); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Vulnerability)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Toolchain_VulnCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VulnCheck'
type Toolchain_VulnCheck_Call struct {
	*mock.Call
}

// VulnCheck is a helper method to define mock.On call
//   - path string
func (_e *Toolchain_Expecter) VulnCheck(path interface{}) *Toolchain_VulnCheck_Call {
	return &Toolchain_VulnCheck_Call{Call: _e.mock.On("VulnCheck", path)}
}

func (_c *Toolchain_VulnCheck_Call) Run(run func(path string)) *Toolchain_VulnCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Toolchain_VulnCheck_Call) Return(vulnerabilitys []internal.Vulnerability, err error) *Toolchain_VulnCheck_Call {
	_c.Call.Return(vulnerabilitys, err)
	return _c
}

func (_c *Toolchain_VulnCheck_Call) RunAndReturn(run func(path string) ([]internal.Vulnerability, error)) *Toolchain_VulnCheck_Call {
	_c.Call.Return(run)
	return _c
}
