// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"debug/buildinfo"
	"os"

	mock "github.com/stretchr/testify/mock"
)

// NewSystem creates a new instance of System. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSystem(t interface {
	mock.TestingT
	Cleanup(func())
}) *System {
	mock := &System{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// System is an autogenerated mock type for the System type
type System struct {
	mock.Mock
}

type System_Expecter struct {
	mock *mock.Mock
}

func (_m *System) EXPECT() *System_Expecter {
	return &System_Expecter{mock: &_m.Mock}
}

// GetEnvVar provides a mock function for the type System
func (_mock *System) GetEnvVar(key string) (string, bool) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvVar")
	}

	var r0 string
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// System_GetEnvVar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnvVar'
type System_GetEnvVar_Call struct {
	*mock.Call
}

// GetEnvVar is a helper method to define mock.On call
//   - key string
func (_e *System_Expecter) GetEnvVar(key interface{}) *System_GetEnvVar_Call {
	return &System_GetEnvVar_Call{Call: _e.mock.On("GetEnvVar", key)}
}

func (_c *System_GetEnvVar_Call) Run(run func(key string)) *System_GetEnvVar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *System_GetEnvVar_Call) Return(s string, b bool) *System_GetEnvVar_Call {
	_c.Call.Return(s, b)
	return _c
}

func (_c *System_GetEnvVar_Call) RunAndReturn(run func(key string) (string, bool)) *System_GetEnvVar_Call {
	_c.Call.Return(run)
	return _c
}

// LStat provides a mock function for the type System
func (_mock *System) LStat(name string) (os.FileInfo, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for LStat")
	}

	var r0 os.FileInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (os.FileInfo, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) os.FileInfo); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(os.FileInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// System_LStat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LStat'
type System_LStat_Call struct {
	*mock.Call
}

// LStat is a helper method to define mock.On call
//   - name string
func (_e *System_Expecter) LStat(name interface{}) *System_LStat_Call {
	return &System_LStat_Call{Call: _e.mock.On("LStat", name)}
}

func (_c *System_LStat_Call) Run(run func(name string)) *System_LStat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *System_LStat_Call) Return(v os.FileInfo, err error) *System_LStat_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *System_LStat_Call) RunAndReturn(run func(name string) (os.FileInfo, error)) *System_LStat_Call {
	_c.Call.Return(run)
	return _c
}

// LookPath provides a mock function for the type System
func (_mock *System) LookPath(file string) (string, error) {
	ret := _mock.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for LookPath")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(file)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(file)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(file)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// System_LookPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookPath'
type System_LookPath_Call struct {
	*mock.Call
}

// LookPath is a helper method to define mock.On call
//   - file string
func (_e *System_Expecter) LookPath(file interface{}) *System_LookPath_Call {
	return &System_LookPath_Call{Call: _e.mock.On("LookPath", file)}
}

func (_c *System_LookPath_Call) Run(run func(file string)) *System_LookPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *System_LookPath_Call) Return(s string, err error) *System_LookPath_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *System_LookPath_Call) RunAndReturn(run func(file string) (string, error)) *System_LookPath_Call {
	_c.Call.Return(run)
	return _c
}

// MkdirAll provides a mock function for the type System
func (_mock *System) MkdirAll(path string, perm os.FileMode) error {
	ret := _mock.Called(path, perm)

	if len(ret) == 0 {
		panic("no return value specified for MkdirAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, os.FileMode) error); ok {
		r0 = returnFunc(path, perm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// System_MkdirAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirAll'
type System_MkdirAll_Call struct {
	*mock.Call
}

// MkdirAll is a helper method to define mock.On call
//   - path string
//   - perm os.FileMode
func (_e *System_Expecter) MkdirAll(path interface{}, perm interface{}) *System_MkdirAll_Call {
	return &System_MkdirAll_Call{Call: _e.mock.On("MkdirAll", path, perm)}
}

func (_c *System_MkdirAll_Call) Run(run func(path string, perm os.FileMode)) *System_MkdirAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 os.FileMode
		if args[1] != nil {
			arg1 = args[1].(os.FileMode)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *System_MkdirAll_Call) Return(err error) *System_MkdirAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *System_MkdirAll_Call) RunAndReturn(run func(path string, perm os.FileMode) error) *System_MkdirAll_Call {
	_c.Call.Return(run)
	return _c
}

// MkdirTemp provides a mock function for the type System
func (_mock *System) MkdirTemp(dir string, pattern string) (string, error) {
	ret := _mock.Called(dir, pattern)

	if len(ret) == 0 {
		panic("no return value specified for MkdirTemp")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(dir, pattern)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(dir, pattern)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(dir, pattern)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// System_MkdirTemp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirTemp'
type System_MkdirTemp_Call struct {
	*mock.Call
}

// MkdirTemp is a helper method to define mock.On call
//   - dir string
//   - pattern string
func (_e *System_Expecter) MkdirTemp(dir interface{}, pattern interface{}) *System_MkdirTemp_Call {
	return &System_MkdirTemp_Call{Call: _e.mock.On("MkdirTemp", dir, pattern)}
}

func (_c *System_MkdirTemp_Call) Run(run func(dir string, pattern string)) *System_MkdirTemp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *System_MkdirTemp_Call) Return(s string, err error) *System_MkdirTemp_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *System_MkdirTemp_Call) RunAndReturn(run func(dir string, pattern string) (string, error)) *System_MkdirTemp_Call {
	_c.Call.Return(run)
	return _c
}

// PathListSeparator provides a mock function for the type System
func (_mock *System) PathListSeparator() rune {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PathListSeparator")
	}

	var r0 rune
	if returnFunc, ok := ret.Get(0).(func() rune); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(rune)
	}
	return r0
}

// System_PathListSeparator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PathListSeparator'
type System_PathListSeparator_Call struct {
	*mock.Call
}

// PathListSeparator is a helper method to define mock.On call
func (_e *System_Expecter) PathListSeparator() *System_PathListSeparator_Call {
	return &System_PathListSeparator_Call{Call: _e.mock.On("PathListSeparator")}
}

func (_c *System_PathListSeparator_Call) Run(run func()) *System_PathListSeparator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *System_PathListSeparator_Call) Return(n rune) *System_PathListSeparator_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *System_PathListSeparator_Call) RunAndReturn(run func() rune) *System_PathListSeparator_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBuildInfo provides a mock function for the type System
func (_mock *System) ReadBuildInfo(path string) (*buildinfo.BuildInfo, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for ReadBuildInfo")
	}

	var r0 *buildinfo.BuildInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*buildinfo.BuildInfo, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *buildinfo.BuildInfo); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*buildinfo.BuildInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// System_ReadBuildInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBuildInfo'
type System_ReadBuildInfo_Call struct {
	*mock.Call
}

// ReadBuildInfo is a helper method to define mock.On call
//   - path string
func (_e *System_Expecter) ReadBuildInfo(path interface{}) *System_ReadBuildInfo_Call {
	return &System_ReadBuildInfo_Call{Call: _e.mock.On("ReadBuildInfo", path)}
}

func (_c *System_ReadBuildInfo_Call) Run(run func(path string)) *System_ReadBuildInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *System_ReadBuildInfo_Call) Return(v *buildinfo.BuildInfo, err error) *System_ReadBuildInfo_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *System_ReadBuildInfo_Call) RunAndReturn(run func(path string) (*buildinfo.BuildInfo, error)) *System_ReadBuildInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDir provides a mock function for the type System
func (_mock *System) ReadDir(dirname string) ([]os.DirEntry, error) {
	ret := _mock.Called(dirname)

	if len(ret) == 0 {
		panic("no return value specified for ReadDir")
	}

	var r0 []os.DirEntry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]os.DirEntry, error)); ok {
		return returnFunc(dirname)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []os.DirEntry); ok {
		r0 = returnFunc(dirname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]os.DirEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(dirname)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// System_ReadDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDir'
type System_ReadDir_Call struct {
	*mock.Call
}

// ReadDir is a helper method to define mock.On call
//   - dirname string
func (_e *System_Expecter) ReadDir(dirname interface{}) *System_ReadDir_Call {
	return &System_ReadDir_Call{Call: _e.mock.On("ReadDir", dirname)}
}

func (_c *System_ReadDir_Call) Run(run func(dirname string)) *System_ReadDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *System_ReadDir_Call) Return(vs []os.DirEntry, err error) *System_ReadDir_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *System_ReadDir_Call) RunAndReturn(run func(dirname string) ([]os.DirEntry, error)) *System_ReadDir_Call {
	_c.Call.Return(run)
	return _c
}

// Readlink provides a mock function for the type System
func (_mock *System) Readlink(name string) (string, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Readlink")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// System_Readlink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Readlink'
type System_Readlink_Call struct {
	*mock.Call
}

// Readlink is a helper method to define mock.On call
//   - name string
func (_e *System_Expecter) Readlink(name interface{}) *System_Readlink_Call {
	return &System_Readlink_Call{Call: _e.mock.On("Readlink", name)}
}

func (_c *System_Readlink_Call) Run(run func(name string)) *System_Readlink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *System_Readlink_Call) Return(s string, err error) *System_Readlink_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *System_Readlink_Call) RunAndReturn(run func(name string) (string, error)) *System_Readlink_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type System
func (_mock *System) Remove(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// System_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type System_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - name string
func (_e *System_Expecter) Remove(name interface{}) *System_Remove_Call {
	return &System_Remove_Call{Call: _e.mock.On("Remove", name)}
}

func (_c *System_Remove_Call) Run(run func(name string)) *System_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *System_Remove_Call) Return(err error) *System_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *System_Remove_Call) RunAndReturn(run func(name string) error) *System_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAll provides a mock function for the type System
func (_mock *System) RemoveAll(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// System_RemoveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAll'
type System_RemoveAll_Call struct {
	*mock.Call
}

// RemoveAll is a helper method to define mock.On call
//   - path string
func (_e *System_Expecter) RemoveAll(path interface{}) *System_RemoveAll_Call {
	return &System_RemoveAll_Call{Call: _e.mock.On("RemoveAll", path)}
}

func (_c *System_RemoveAll_Call) Run(run func(path string)) *System_RemoveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *System_RemoveAll_Call) Return(err error) *System_RemoveAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *System_RemoveAll_Call) RunAndReturn(run func(path string) error) *System_RemoveAll_Call {
	_c.Call.Return(run)
	return _c
}

// Rename provides a mock function for the type System
func (_mock *System) Rename(oldpath string, newpath string) error {
	ret := _mock.Called(oldpath, newpath)

	if len(ret) == 0 {
		panic("no return value specified for Rename")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(oldpath, newpath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// System_Rename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rename'
type System_Rename_Call struct {
	*mock.Call
}

// Rename is a helper method to define mock.On call
//   - oldpath string
//   - newpath string
func (_e *System_Expecter) Rename(oldpath interface{}, newpath interface{}) *System_Rename_Call {
	return &System_Rename_Call{Call: _e.mock.On("Rename", oldpath, newpath)}
}

func (_c *System_Rename_Call) Run(run func(oldpath string, newpath string)) *System_Rename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *System_Rename_Call) Return(err error) *System_Rename_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *System_Rename_Call) RunAndReturn(run func(oldpath string, newpath string) error) *System_Rename_Call {
	_c.Call.Return(run)
	return _c
}

// RuntimeARCH provides a mock function for the type System
func (_mock *System) RuntimeARCH() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RuntimeARCH")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// System_RuntimeARCH_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeARCH'
type System_RuntimeARCH_Call struct {
	*mock.Call
}

// RuntimeARCH is a helper method to define mock.On call
func (_e *System_Expecter) RuntimeARCH() *System_RuntimeARCH_Call {
	return &System_RuntimeARCH_Call{Call: _e.mock.On("RuntimeARCH")}
}

func (_c *System_RuntimeARCH_Call) Run(run func()) *System_RuntimeARCH_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *System_RuntimeARCH_Call) Return(s string) *System_RuntimeARCH_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *System_RuntimeARCH_Call) RunAndReturn(run func() string) *System_RuntimeARCH_Call {
	_c.Call.Return(run)
	return _c
}

// RuntimeOS provides a mock function for the type System
func (_mock *System) RuntimeOS() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RuntimeOS")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// System_RuntimeOS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeOS'
type System_RuntimeOS_Call struct {
	*mock.Call
}

// RuntimeOS is a helper method to define mock.On call
func (_e *System_Expecter) RuntimeOS() *System_RuntimeOS_Call {
	return &System_RuntimeOS_Call{Call: _e.mock.On("RuntimeOS")}
}

func (_c *System_RuntimeOS_Call) Run(run func()) *System_RuntimeOS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *System_RuntimeOS_Call) Return(s string) *System_RuntimeOS_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *System_RuntimeOS_Call) RunAndReturn(run func() string) *System_RuntimeOS_Call {
	_c.Call.Return(run)
	return _c
}

// RuntimeVersion provides a mock function for the type System
func (_mock *System) RuntimeVersion() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RuntimeVersion")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// System_RuntimeVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeVersion'
type System_RuntimeVersion_Call struct {
	*mock.Call
}

// RuntimeVersion is a helper method to define mock.On call
func (_e *System_Expecter) RuntimeVersion() *System_RuntimeVersion_Call {
	return &System_RuntimeVersion_Call{Call: _e.mock.On("RuntimeVersion")}
}

func (_c *System_RuntimeVersion_Call) Run(run func()) *System_RuntimeVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *System_RuntimeVersion_Call) Return(s string) *System_RuntimeVersion_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *System_RuntimeVersion_Call) RunAndReturn(run func() string) *System_RuntimeVersion_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function for the type System
func (_mock *System) Stat(name string) (os.FileInfo, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 os.FileInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (os.FileInfo, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) os.FileInfo); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(os.FileInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// System_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type System_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - name string
func (_e *System_Expecter) Stat(name interface{}) *System_Stat_Call {
	return &System_Stat_Call{Call: _e.mock.On("Stat", name)}
}

func (_c *System_Stat_Call) Run(run func(name string)) *System_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *System_Stat_Call) Return(v os.FileInfo, err error) *System_Stat_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *System_Stat_Call) RunAndReturn(run func(name string) (os.FileInfo, error)) *System_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// Symlink provides a mock function for the type System
func (_mock *System) Symlink(oldname string, newname string) error {
	ret := _mock.Called(oldname, newname)

	if len(ret) == 0 {
		panic("no return value specified for Symlink")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(oldname, newname)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// System_Symlink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Symlink'
type System_Symlink_Call struct {
	*mock.Call
}

// Symlink is a helper method to define mock.On call
//   - oldname string
//   - newname string
func (_e *System_Expecter) Symlink(oldname interface{}, newname interface{}) *System_Symlink_Call {
	return &System_Symlink_Call{Call: _e.mock.On("Symlink", oldname, newname)}
}

func (_c *System_Symlink_Call) Run(run func(oldname string, newname string)) *System_Symlink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *System_Symlink_Call) Return(err error) *System_Symlink_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *System_Symlink_Call) RunAndReturn(run func(oldname string, newname string) error) *System_Symlink_Call {
	_c.Call.Return(run)
	return _c
}

// UserHomeDir provides a mock function for the type System
func (_mock *System) UserHomeDir() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserHomeDir")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// System_UserHomeDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserHomeDir'
type System_UserHomeDir_Call struct {
	*mock.Call
}

// UserHomeDir is a helper method to define mock.On call
func (_e *System_Expecter) UserHomeDir() *System_UserHomeDir_Call {
	return &System_UserHomeDir_Call{Call: _e.mock.On("UserHomeDir")}
}

func (_c *System_UserHomeDir_Call) Run(run func()) *System_UserHomeDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *System_UserHomeDir_Call) Return(s string, err error) *System_UserHomeDir_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *System_UserHomeDir_Call) RunAndReturn(run func() (string, error)) *System_UserHomeDir_Call {
	_c.Call.Return(run)
	return _c
}
