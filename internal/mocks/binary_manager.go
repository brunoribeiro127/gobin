// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/brunoribeiro127/gobin/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// NewBinaryManager creates a new instance of BinaryManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBinaryManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *BinaryManager {
	mock := &BinaryManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// BinaryManager is an autogenerated mock type for the BinaryManager type
type BinaryManager struct {
	mock.Mock
}

type BinaryManager_Expecter struct {
	mock *mock.Mock
}

func (_m *BinaryManager) EXPECT() *BinaryManager_Expecter {
	return &BinaryManager_Expecter{mock: &_m.Mock}
}

// DiagnoseBinary provides a mock function for the type BinaryManager
func (_mock *BinaryManager) DiagnoseBinary(ctx context.Context, path string) (model.BinaryDiagnostic, error) {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for DiagnoseBinary")
	}

	var r0 model.BinaryDiagnostic
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (model.BinaryDiagnostic, error)); ok {
		return returnFunc(ctx, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) model.BinaryDiagnostic); ok {
		r0 = returnFunc(ctx, path)
	} else {
		r0 = ret.Get(0).(model.BinaryDiagnostic)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// BinaryManager_DiagnoseBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiagnoseBinary'
type BinaryManager_DiagnoseBinary_Call struct {
	*mock.Call
}

// DiagnoseBinary is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *BinaryManager_Expecter) DiagnoseBinary(ctx interface{}, path interface{}) *BinaryManager_DiagnoseBinary_Call {
	return &BinaryManager_DiagnoseBinary_Call{Call: _e.mock.On("DiagnoseBinary", ctx, path)}
}

func (_c *BinaryManager_DiagnoseBinary_Call) Run(run func(ctx context.Context, path string)) *BinaryManager_DiagnoseBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *BinaryManager_DiagnoseBinary_Call) Return(binaryDiagnostic model.BinaryDiagnostic, err error) *BinaryManager_DiagnoseBinary_Call {
	_c.Call.Return(binaryDiagnostic, err)
	return _c
}

func (_c *BinaryManager_DiagnoseBinary_Call) RunAndReturn(run func(ctx context.Context, path string) (model.BinaryDiagnostic, error)) *BinaryManager_DiagnoseBinary_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllBinaryInfos provides a mock function for the type BinaryManager
func (_mock *BinaryManager) GetAllBinaryInfos(managed bool) ([]model.BinaryInfo, error) {
	ret := _mock.Called(managed)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBinaryInfos")
	}

	var r0 []model.BinaryInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(bool) ([]model.BinaryInfo, error)); ok {
		return returnFunc(managed)
	}
	if returnFunc, ok := ret.Get(0).(func(bool) []model.BinaryInfo); ok {
		r0 = returnFunc(managed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.BinaryInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(bool) error); ok {
		r1 = returnFunc(managed)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// BinaryManager_GetAllBinaryInfos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllBinaryInfos'
type BinaryManager_GetAllBinaryInfos_Call struct {
	*mock.Call
}

// GetAllBinaryInfos is a helper method to define mock.On call
//   - managed bool
func (_e *BinaryManager_Expecter) GetAllBinaryInfos(managed interface{}) *BinaryManager_GetAllBinaryInfos_Call {
	return &BinaryManager_GetAllBinaryInfos_Call{Call: _e.mock.On("GetAllBinaryInfos", managed)}
}

func (_c *BinaryManager_GetAllBinaryInfos_Call) Run(run func(managed bool)) *BinaryManager_GetAllBinaryInfos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 bool
		if args[0] != nil {
			arg0 = args[0].(bool)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BinaryManager_GetAllBinaryInfos_Call) Return(binaryInfos []model.BinaryInfo, err error) *BinaryManager_GetAllBinaryInfos_Call {
	_c.Call.Return(binaryInfos, err)
	return _c
}

func (_c *BinaryManager_GetAllBinaryInfos_Call) RunAndReturn(run func(managed bool) ([]model.BinaryInfo, error)) *BinaryManager_GetAllBinaryInfos_Call {
	_c.Call.Return(run)
	return _c
}

// GetBinaryInfo provides a mock function for the type BinaryManager
func (_mock *BinaryManager) GetBinaryInfo(path string) (model.BinaryInfo, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetBinaryInfo")
	}

	var r0 model.BinaryInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (model.BinaryInfo, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) model.BinaryInfo); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(model.BinaryInfo)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// BinaryManager_GetBinaryInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBinaryInfo'
type BinaryManager_GetBinaryInfo_Call struct {
	*mock.Call
}

// GetBinaryInfo is a helper method to define mock.On call
//   - path string
func (_e *BinaryManager_Expecter) GetBinaryInfo(path interface{}) *BinaryManager_GetBinaryInfo_Call {
	return &BinaryManager_GetBinaryInfo_Call{Call: _e.mock.On("GetBinaryInfo", path)}
}

func (_c *BinaryManager_GetBinaryInfo_Call) Run(run func(path string)) *BinaryManager_GetBinaryInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BinaryManager_GetBinaryInfo_Call) Return(binaryInfo model.BinaryInfo, err error) *BinaryManager_GetBinaryInfo_Call {
	_c.Call.Return(binaryInfo, err)
	return _c
}

func (_c *BinaryManager_GetBinaryInfo_Call) RunAndReturn(run func(path string) (model.BinaryInfo, error)) *BinaryManager_GetBinaryInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetBinaryRepository provides a mock function for the type BinaryManager
func (_mock *BinaryManager) GetBinaryRepository(ctx context.Context, bin model.Binary) (string, error) {
	ret := _mock.Called(ctx, bin)

	if len(ret) == 0 {
		panic("no return value specified for GetBinaryRepository")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Binary) (string, error)); ok {
		return returnFunc(ctx, bin)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Binary) string); ok {
		r0 = returnFunc(ctx, bin)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.Binary) error); ok {
		r1 = returnFunc(ctx, bin)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// BinaryManager_GetBinaryRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBinaryRepository'
type BinaryManager_GetBinaryRepository_Call struct {
	*mock.Call
}

// GetBinaryRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - bin model.Binary
func (_e *BinaryManager_Expecter) GetBinaryRepository(ctx interface{}, bin interface{}) *BinaryManager_GetBinaryRepository_Call {
	return &BinaryManager_GetBinaryRepository_Call{Call: _e.mock.On("GetBinaryRepository", ctx, bin)}
}

func (_c *BinaryManager_GetBinaryRepository_Call) Run(run func(ctx context.Context, bin model.Binary)) *BinaryManager_GetBinaryRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.Binary
		if args[1] != nil {
			arg1 = args[1].(model.Binary)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *BinaryManager_GetBinaryRepository_Call) Return(s string, err error) *BinaryManager_GetBinaryRepository_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *BinaryManager_GetBinaryRepository_Call) RunAndReturn(run func(ctx context.Context, bin model.Binary) (string, error)) *BinaryManager_GetBinaryRepository_Call {
	_c.Call.Return(run)
	return _c
}

// GetBinaryUpgradeInfo provides a mock function for the type BinaryManager
func (_mock *BinaryManager) GetBinaryUpgradeInfo(ctx context.Context, info model.BinaryInfo, checkMajor bool) (model.BinaryUpgradeInfo, error) {
	ret := _mock.Called(ctx, info, checkMajor)

	if len(ret) == 0 {
		panic("no return value specified for GetBinaryUpgradeInfo")
	}

	var r0 model.BinaryUpgradeInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.BinaryInfo, bool) (model.BinaryUpgradeInfo, error)); ok {
		return returnFunc(ctx, info, checkMajor)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.BinaryInfo, bool) model.BinaryUpgradeInfo); ok {
		r0 = returnFunc(ctx, info, checkMajor)
	} else {
		r0 = ret.Get(0).(model.BinaryUpgradeInfo)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.BinaryInfo, bool) error); ok {
		r1 = returnFunc(ctx, info, checkMajor)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// BinaryManager_GetBinaryUpgradeInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBinaryUpgradeInfo'
type BinaryManager_GetBinaryUpgradeInfo_Call struct {
	*mock.Call
}

// GetBinaryUpgradeInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - info model.BinaryInfo
//   - checkMajor bool
func (_e *BinaryManager_Expecter) GetBinaryUpgradeInfo(ctx interface{}, info interface{}, checkMajor interface{}) *BinaryManager_GetBinaryUpgradeInfo_Call {
	return &BinaryManager_GetBinaryUpgradeInfo_Call{Call: _e.mock.On("GetBinaryUpgradeInfo", ctx, info, checkMajor)}
}

func (_c *BinaryManager_GetBinaryUpgradeInfo_Call) Run(run func(ctx context.Context, info model.BinaryInfo, checkMajor bool)) *BinaryManager_GetBinaryUpgradeInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.BinaryInfo
		if args[1] != nil {
			arg1 = args[1].(model.BinaryInfo)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *BinaryManager_GetBinaryUpgradeInfo_Call) Return(binaryUpgradeInfo model.BinaryUpgradeInfo, err error) *BinaryManager_GetBinaryUpgradeInfo_Call {
	_c.Call.Return(binaryUpgradeInfo, err)
	return _c
}

func (_c *BinaryManager_GetBinaryUpgradeInfo_Call) RunAndReturn(run func(ctx context.Context, info model.BinaryInfo, checkMajor bool) (model.BinaryUpgradeInfo, error)) *BinaryManager_GetBinaryUpgradeInfo_Call {
	_c.Call.Return(run)
	return _c
}

// InstallPackage provides a mock function for the type BinaryManager
func (_mock *BinaryManager) InstallPackage(ctx context.Context, pkg model.Package) error {
	ret := _mock.Called(ctx, pkg)

	if len(ret) == 0 {
		panic("no return value specified for InstallPackage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Package) error); ok {
		r0 = returnFunc(ctx, pkg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BinaryManager_InstallPackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallPackage'
type BinaryManager_InstallPackage_Call struct {
	*mock.Call
}

// InstallPackage is a helper method to define mock.On call
//   - ctx context.Context
//   - pkg model.Package
func (_e *BinaryManager_Expecter) InstallPackage(ctx interface{}, pkg interface{}) *BinaryManager_InstallPackage_Call {
	return &BinaryManager_InstallPackage_Call{Call: _e.mock.On("InstallPackage", ctx, pkg)}
}

func (_c *BinaryManager_InstallPackage_Call) Run(run func(ctx context.Context, pkg model.Package)) *BinaryManager_InstallPackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.Package
		if args[1] != nil {
			arg1 = args[1].(model.Package)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *BinaryManager_InstallPackage_Call) Return(err error) *BinaryManager_InstallPackage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BinaryManager_InstallPackage_Call) RunAndReturn(run func(ctx context.Context, pkg model.Package) error) *BinaryManager_InstallPackage_Call {
	_c.Call.Return(run)
	return _c
}

// ListBinariesFullPaths provides a mock function for the type BinaryManager
func (_mock *BinaryManager) ListBinariesFullPaths(dir string) ([]string, error) {
	ret := _mock.Called(dir)

	if len(ret) == 0 {
		panic("no return value specified for ListBinariesFullPaths")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return returnFunc(dir)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(dir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(dir)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// BinaryManager_ListBinariesFullPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBinariesFullPaths'
type BinaryManager_ListBinariesFullPaths_Call struct {
	*mock.Call
}

// ListBinariesFullPaths is a helper method to define mock.On call
//   - dir string
func (_e *BinaryManager_Expecter) ListBinariesFullPaths(dir interface{}) *BinaryManager_ListBinariesFullPaths_Call {
	return &BinaryManager_ListBinariesFullPaths_Call{Call: _e.mock.On("ListBinariesFullPaths", dir)}
}

func (_c *BinaryManager_ListBinariesFullPaths_Call) Run(run func(dir string)) *BinaryManager_ListBinariesFullPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BinaryManager_ListBinariesFullPaths_Call) Return(strings []string, err error) *BinaryManager_ListBinariesFullPaths_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *BinaryManager_ListBinariesFullPaths_Call) RunAndReturn(run func(dir string) ([]string, error)) *BinaryManager_ListBinariesFullPaths_Call {
	_c.Call.Return(run)
	return _c
}

// MigrateBinary provides a mock function for the type BinaryManager
func (_mock *BinaryManager) MigrateBinary(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for MigrateBinary")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BinaryManager_MigrateBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MigrateBinary'
type BinaryManager_MigrateBinary_Call struct {
	*mock.Call
}

// MigrateBinary is a helper method to define mock.On call
//   - path string
func (_e *BinaryManager_Expecter) MigrateBinary(path interface{}) *BinaryManager_MigrateBinary_Call {
	return &BinaryManager_MigrateBinary_Call{Call: _e.mock.On("MigrateBinary", path)}
}

func (_c *BinaryManager_MigrateBinary_Call) Run(run func(path string)) *BinaryManager_MigrateBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BinaryManager_MigrateBinary_Call) Return(err error) *BinaryManager_MigrateBinary_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BinaryManager_MigrateBinary_Call) RunAndReturn(run func(path string) error) *BinaryManager_MigrateBinary_Call {
	_c.Call.Return(run)
	return _c
}

// PinBinary provides a mock function for the type BinaryManager
func (_mock *BinaryManager) PinBinary(bin model.Binary, kind model.Kind) error {
	ret := _mock.Called(bin, kind)

	if len(ret) == 0 {
		panic("no return value specified for PinBinary")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(model.Binary, model.Kind) error); ok {
		r0 = returnFunc(bin, kind)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BinaryManager_PinBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PinBinary'
type BinaryManager_PinBinary_Call struct {
	*mock.Call
}

// PinBinary is a helper method to define mock.On call
//   - bin model.Binary
//   - kind model.Kind
func (_e *BinaryManager_Expecter) PinBinary(bin interface{}, kind interface{}) *BinaryManager_PinBinary_Call {
	return &BinaryManager_PinBinary_Call{Call: _e.mock.On("PinBinary", bin, kind)}
}

func (_c *BinaryManager_PinBinary_Call) Run(run func(bin model.Binary, kind model.Kind)) *BinaryManager_PinBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Binary
		if args[0] != nil {
			arg0 = args[0].(model.Binary)
		}
		var arg1 model.Kind
		if args[1] != nil {
			arg1 = args[1].(model.Kind)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *BinaryManager_PinBinary_Call) Return(err error) *BinaryManager_PinBinary_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BinaryManager_PinBinary_Call) RunAndReturn(run func(bin model.Binary, kind model.Kind) error) *BinaryManager_PinBinary_Call {
	_c.Call.Return(run)
	return _c
}

// UninstallBinary provides a mock function for the type BinaryManager
func (_mock *BinaryManager) UninstallBinary(bin model.Binary) error {
	ret := _mock.Called(bin)

	if len(ret) == 0 {
		panic("no return value specified for UninstallBinary")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(model.Binary) error); ok {
		r0 = returnFunc(bin)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BinaryManager_UninstallBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UninstallBinary'
type BinaryManager_UninstallBinary_Call struct {
	*mock.Call
}

// UninstallBinary is a helper method to define mock.On call
//   - bin model.Binary
func (_e *BinaryManager_Expecter) UninstallBinary(bin interface{}) *BinaryManager_UninstallBinary_Call {
	return &BinaryManager_UninstallBinary_Call{Call: _e.mock.On("UninstallBinary", bin)}
}

func (_c *BinaryManager_UninstallBinary_Call) Run(run func(bin model.Binary)) *BinaryManager_UninstallBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Binary
		if args[0] != nil {
			arg0 = args[0].(model.Binary)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BinaryManager_UninstallBinary_Call) Return(err error) *BinaryManager_UninstallBinary_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BinaryManager_UninstallBinary_Call) RunAndReturn(run func(bin model.Binary) error) *BinaryManager_UninstallBinary_Call {
	_c.Call.Return(run)
	return _c
}

// UpgradeBinary provides a mock function for the type BinaryManager
func (_mock *BinaryManager) UpgradeBinary(ctx context.Context, binFullPath string, majorUpgrade bool, rebuild bool) error {
	ret := _mock.Called(ctx, binFullPath, majorUpgrade, rebuild)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeBinary")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool, bool) error); ok {
		r0 = returnFunc(ctx, binFullPath, majorUpgrade, rebuild)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BinaryManager_UpgradeBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpgradeBinary'
type BinaryManager_UpgradeBinary_Call struct {
	*mock.Call
}

// UpgradeBinary is a helper method to define mock.On call
//   - ctx context.Context
//   - binFullPath string
//   - majorUpgrade bool
//   - rebuild bool
func (_e *BinaryManager_Expecter) UpgradeBinary(ctx interface{}, binFullPath interface{}, majorUpgrade interface{}, rebuild interface{}) *BinaryManager_UpgradeBinary_Call {
	return &BinaryManager_UpgradeBinary_Call{Call: _e.mock.On("UpgradeBinary", ctx, binFullPath, majorUpgrade, rebuild)}
}

func (_c *BinaryManager_UpgradeBinary_Call) Run(run func(ctx context.Context, binFullPath string, majorUpgrade bool, rebuild bool)) *BinaryManager_UpgradeBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *BinaryManager_UpgradeBinary_Call) Return(err error) *BinaryManager_UpgradeBinary_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BinaryManager_UpgradeBinary_Call) RunAndReturn(run func(ctx context.Context, binFullPath string, majorUpgrade bool, rebuild bool) error) *BinaryManager_UpgradeBinary_Call {
	_c.Call.Return(run)
	return _c
}
