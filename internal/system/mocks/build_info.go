// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"debug/buildinfo"

	mock "github.com/stretchr/testify/mock"
)

// NewBuildInfo creates a new instance of BuildInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuildInfo(t interface {
	mock.TestingT
	Cleanup(func())
}) *BuildInfo {
	mock := &BuildInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// BuildInfo is an autogenerated mock type for the BuildInfo type
type BuildInfo struct {
	mock.Mock
}

type BuildInfo_Expecter struct {
	mock *mock.Mock
}

func (_m *BuildInfo) EXPECT() *BuildInfo_Expecter {
	return &BuildInfo_Expecter{mock: &_m.Mock}
}

// Read provides a mock function for the type BuildInfo
func (_mock *BuildInfo) Read(path string) (*buildinfo.BuildInfo, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *buildinfo.BuildInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*buildinfo.BuildInfo, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *buildinfo.BuildInfo); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*buildinfo.BuildInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// BuildInfo_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type BuildInfo_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - path string
func (_e *BuildInfo_Expecter) Read(path interface{}) *BuildInfo_Read_Call {
	return &BuildInfo_Read_Call{Call: _e.mock.On("Read", path)}
}

func (_c *BuildInfo_Read_Call) Run(run func(path string)) *BuildInfo_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BuildInfo_Read_Call) Return(v *buildinfo.BuildInfo, err error) *BuildInfo_Read_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *BuildInfo_Read_Call) RunAndReturn(run func(path string) (*buildinfo.BuildInfo, error)) *BuildInfo_Read_Call {
	_c.Call.Return(run)
	return _c
}
