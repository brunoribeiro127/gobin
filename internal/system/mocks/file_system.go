// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"os"

	"github.com/brunoribeiro127/gobin/internal/system"
	mock "github.com/stretchr/testify/mock"
)

// NewFileSystem creates a new instance of FileSystem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileSystem(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileSystem {
	mock := &FileSystem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FileSystem is an autogenerated mock type for the FileSystem type
type FileSystem struct {
	mock.Mock
}

type FileSystem_Expecter struct {
	mock *mock.Mock
}

func (_m *FileSystem) EXPECT() *FileSystem_Expecter {
	return &FileSystem_Expecter{mock: &_m.Mock}
}

// CreateDir provides a mock function for the type FileSystem
func (_mock *FileSystem) CreateDir(path string, perm os.FileMode) error {
	ret := _mock.Called(path, perm)

	if len(ret) == 0 {
		panic("no return value specified for CreateDir")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, os.FileMode) error); ok {
		r0 = returnFunc(path, perm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FileSystem_CreateDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDir'
type FileSystem_CreateDir_Call struct {
	*mock.Call
}

// CreateDir is a helper method to define mock.On call
//   - path string
//   - perm os.FileMode
func (_e *FileSystem_Expecter) CreateDir(path interface{}, perm interface{}) *FileSystem_CreateDir_Call {
	return &FileSystem_CreateDir_Call{Call: _e.mock.On("CreateDir", path, perm)}
}

func (_c *FileSystem_CreateDir_Call) Run(run func(path string, perm os.FileMode)) *FileSystem_CreateDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 os.FileMode
		if args[1] != nil {
			arg1 = args[1].(os.FileMode)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FileSystem_CreateDir_Call) Return(err error) *FileSystem_CreateDir_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FileSystem_CreateDir_Call) RunAndReturn(run func(path string, perm os.FileMode) error) *FileSystem_CreateDir_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTempDir provides a mock function for the type FileSystem
func (_mock *FileSystem) CreateTempDir(dir string, pattern string) (string, system.CleanupFunc, error) {
	ret := _mock.Called(dir, pattern)

	if len(ret) == 0 {
		panic("no return value specified for CreateTempDir")
	}

	var r0 string
	var r1 system.CleanupFunc
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, system.CleanupFunc, error)); ok {
		return returnFunc(dir, pattern)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(dir, pattern)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) system.CleanupFunc); ok {
		r1 = returnFunc(dir, pattern)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(system.CleanupFunc)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = returnFunc(dir, pattern)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// FileSystem_CreateTempDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTempDir'
type FileSystem_CreateTempDir_Call struct {
	*mock.Call
}

// CreateTempDir is a helper method to define mock.On call
//   - dir string
//   - pattern string
func (_e *FileSystem_Expecter) CreateTempDir(dir interface{}, pattern interface{}) *FileSystem_CreateTempDir_Call {
	return &FileSystem_CreateTempDir_Call{Call: _e.mock.On("CreateTempDir", dir, pattern)}
}

func (_c *FileSystem_CreateTempDir_Call) Run(run func(dir string, pattern string)) *FileSystem_CreateTempDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FileSystem_CreateTempDir_Call) Return(s string, cleanupFunc system.CleanupFunc, err error) *FileSystem_CreateTempDir_Call {
	_c.Call.Return(s, cleanupFunc, err)
	return _c
}

func (_c *FileSystem_CreateTempDir_Call) RunAndReturn(run func(dir string, pattern string) (string, system.CleanupFunc, error)) *FileSystem_CreateTempDir_Call {
	_c.Call.Return(run)
	return _c
}

// GetSymlinkTarget provides a mock function for the type FileSystem
func (_mock *FileSystem) GetSymlinkTarget(path string) (string, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetSymlinkTarget")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileSystem_GetSymlinkTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSymlinkTarget'
type FileSystem_GetSymlinkTarget_Call struct {
	*mock.Call
}

// GetSymlinkTarget is a helper method to define mock.On call
//   - path string
func (_e *FileSystem_Expecter) GetSymlinkTarget(path interface{}) *FileSystem_GetSymlinkTarget_Call {
	return &FileSystem_GetSymlinkTarget_Call{Call: _e.mock.On("GetSymlinkTarget", path)}
}

func (_c *FileSystem_GetSymlinkTarget_Call) Run(run func(path string)) *FileSystem_GetSymlinkTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FileSystem_GetSymlinkTarget_Call) Return(s string, err error) *FileSystem_GetSymlinkTarget_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *FileSystem_GetSymlinkTarget_Call) RunAndReturn(run func(path string) (string, error)) *FileSystem_GetSymlinkTarget_Call {
	_c.Call.Return(run)
	return _c
}

// IsSymlinkToDir provides a mock function for the type FileSystem
func (_mock *FileSystem) IsSymlinkToDir(path string, baseDir string) (bool, error) {
	ret := _mock.Called(path, baseDir)

	if len(ret) == 0 {
		panic("no return value specified for IsSymlinkToDir")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return returnFunc(path, baseDir)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = returnFunc(path, baseDir)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(path, baseDir)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileSystem_IsSymlinkToDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSymlinkToDir'
type FileSystem_IsSymlinkToDir_Call struct {
	*mock.Call
}

// IsSymlinkToDir is a helper method to define mock.On call
//   - path string
//   - baseDir string
func (_e *FileSystem_Expecter) IsSymlinkToDir(path interface{}, baseDir interface{}) *FileSystem_IsSymlinkToDir_Call {
	return &FileSystem_IsSymlinkToDir_Call{Call: _e.mock.On("IsSymlinkToDir", path, baseDir)}
}

func (_c *FileSystem_IsSymlinkToDir_Call) Run(run func(path string, baseDir string)) *FileSystem_IsSymlinkToDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FileSystem_IsSymlinkToDir_Call) Return(b bool, err error) *FileSystem_IsSymlinkToDir_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *FileSystem_IsSymlinkToDir_Call) RunAndReturn(run func(path string, baseDir string) (bool, error)) *FileSystem_IsSymlinkToDir_Call {
	_c.Call.Return(run)
	return _c
}

// ListBinaries provides a mock function for the type FileSystem
func (_mock *FileSystem) ListBinaries(path string) ([]string, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for ListBinaries")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileSystem_ListBinaries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBinaries'
type FileSystem_ListBinaries_Call struct {
	*mock.Call
}

// ListBinaries is a helper method to define mock.On call
//   - path string
func (_e *FileSystem_Expecter) ListBinaries(path interface{}) *FileSystem_ListBinaries_Call {
	return &FileSystem_ListBinaries_Call{Call: _e.mock.On("ListBinaries", path)}
}

func (_c *FileSystem_ListBinaries_Call) Run(run func(path string)) *FileSystem_ListBinaries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FileSystem_ListBinaries_Call) Return(strings []string, err error) *FileSystem_ListBinaries_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *FileSystem_ListBinaries_Call) RunAndReturn(run func(path string) ([]string, error)) *FileSystem_ListBinaries_Call {
	_c.Call.Return(run)
	return _c
}

// LocateBinaryInPath provides a mock function for the type FileSystem
func (_mock *FileSystem) LocateBinaryInPath(name string) []string {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for LocateBinaryInPath")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// FileSystem_LocateBinaryInPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocateBinaryInPath'
type FileSystem_LocateBinaryInPath_Call struct {
	*mock.Call
}

// LocateBinaryInPath is a helper method to define mock.On call
//   - name string
func (_e *FileSystem_Expecter) LocateBinaryInPath(name interface{}) *FileSystem_LocateBinaryInPath_Call {
	return &FileSystem_LocateBinaryInPath_Call{Call: _e.mock.On("LocateBinaryInPath", name)}
}

func (_c *FileSystem_LocateBinaryInPath_Call) Run(run func(name string)) *FileSystem_LocateBinaryInPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FileSystem_LocateBinaryInPath_Call) Return(strings []string) *FileSystem_LocateBinaryInPath_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *FileSystem_LocateBinaryInPath_Call) RunAndReturn(run func(name string) []string) *FileSystem_LocateBinaryInPath_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function for the type FileSystem
func (_mock *FileSystem) Move(source string, target string) error {
	ret := _mock.Called(source, target)

	if len(ret) == 0 {
		panic("no return value specified for Move")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(source, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FileSystem_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type FileSystem_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - source string
//   - target string
func (_e *FileSystem_Expecter) Move(source interface{}, target interface{}) *FileSystem_Move_Call {
	return &FileSystem_Move_Call{Call: _e.mock.On("Move", source, target)}
}

func (_c *FileSystem_Move_Call) Run(run func(source string, target string)) *FileSystem_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FileSystem_Move_Call) Return(err error) *FileSystem_Move_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FileSystem_Move_Call) RunAndReturn(run func(source string, target string) error) *FileSystem_Move_Call {
	_c.Call.Return(run)
	return _c
}

// MoveWithSymlink provides a mock function for the type FileSystem
func (_mock *FileSystem) MoveWithSymlink(source string, target string) error {
	ret := _mock.Called(source, target)

	if len(ret) == 0 {
		panic("no return value specified for MoveWithSymlink")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(source, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FileSystem_MoveWithSymlink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MoveWithSymlink'
type FileSystem_MoveWithSymlink_Call struct {
	*mock.Call
}

// MoveWithSymlink is a helper method to define mock.On call
//   - source string
//   - target string
func (_e *FileSystem_Expecter) MoveWithSymlink(source interface{}, target interface{}) *FileSystem_MoveWithSymlink_Call {
	return &FileSystem_MoveWithSymlink_Call{Call: _e.mock.On("MoveWithSymlink", source, target)}
}

func (_c *FileSystem_MoveWithSymlink_Call) Run(run func(source string, target string)) *FileSystem_MoveWithSymlink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FileSystem_MoveWithSymlink_Call) Return(err error) *FileSystem_MoveWithSymlink_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FileSystem_MoveWithSymlink_Call) RunAndReturn(run func(source string, target string) error) *FileSystem_MoveWithSymlink_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type FileSystem
func (_mock *FileSystem) Remove(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FileSystem_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type FileSystem_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - path string
func (_e *FileSystem_Expecter) Remove(path interface{}) *FileSystem_Remove_Call {
	return &FileSystem_Remove_Call{Call: _e.mock.On("Remove", path)}
}

func (_c *FileSystem_Remove_Call) Run(run func(path string)) *FileSystem_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FileSystem_Remove_Call) Return(err error) *FileSystem_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FileSystem_Remove_Call) RunAndReturn(run func(path string) error) *FileSystem_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// ReplaceSymlink provides a mock function for the type FileSystem
func (_mock *FileSystem) ReplaceSymlink(source string, target string) error {
	ret := _mock.Called(source, target)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceSymlink")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(source, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FileSystem_ReplaceSymlink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceSymlink'
type FileSystem_ReplaceSymlink_Call struct {
	*mock.Call
}

// ReplaceSymlink is a helper method to define mock.On call
//   - source string
//   - target string
func (_e *FileSystem_Expecter) ReplaceSymlink(source interface{}, target interface{}) *FileSystem_ReplaceSymlink_Call {
	return &FileSystem_ReplaceSymlink_Call{Call: _e.mock.On("ReplaceSymlink", source, target)}
}

func (_c *FileSystem_ReplaceSymlink_Call) Run(run func(source string, target string)) *FileSystem_ReplaceSymlink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FileSystem_ReplaceSymlink_Call) Return(err error) *FileSystem_ReplaceSymlink_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FileSystem_ReplaceSymlink_Call) RunAndReturn(run func(source string, target string) error) *FileSystem_ReplaceSymlink_Call {
	_c.Call.Return(run)
	return _c
}
