// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewRuntime creates a new instance of Runtime. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRuntime(t interface {
	mock.TestingT
	Cleanup(func())
}) *Runtime {
	mock := &Runtime{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Runtime is an autogenerated mock type for the Runtime type
type Runtime struct {
	mock.Mock
}

type Runtime_Expecter struct {
	mock *mock.Mock
}

func (_m *Runtime) EXPECT() *Runtime_Expecter {
	return &Runtime_Expecter{mock: &_m.Mock}
}

// OS provides a mock function for the type Runtime
func (_mock *Runtime) OS() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for OS")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Runtime_OS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OS'
type Runtime_OS_Call struct {
	*mock.Call
}

// OS is a helper method to define mock.On call
func (_e *Runtime_Expecter) OS() *Runtime_OS_Call {
	return &Runtime_OS_Call{Call: _e.mock.On("OS")}
}

func (_c *Runtime_OS_Call) Run(run func()) *Runtime_OS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Runtime_OS_Call) Return(s string) *Runtime_OS_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Runtime_OS_Call) RunAndReturn(run func() string) *Runtime_OS_Call {
	_c.Call.Return(run)
	return _c
}

// Platform provides a mock function for the type Runtime
func (_mock *Runtime) Platform() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Platform")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Runtime_Platform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Platform'
type Runtime_Platform_Call struct {
	*mock.Call
}

// Platform is a helper method to define mock.On call
func (_e *Runtime_Expecter) Platform() *Runtime_Platform_Call {
	return &Runtime_Platform_Call{Call: _e.mock.On("Platform")}
}

func (_c *Runtime_Platform_Call) Run(run func()) *Runtime_Platform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Runtime_Platform_Call) Return(s string) *Runtime_Platform_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Runtime_Platform_Call) RunAndReturn(run func() string) *Runtime_Platform_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type Runtime
func (_mock *Runtime) Version() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Runtime_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type Runtime_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *Runtime_Expecter) Version() *Runtime_Version_Call {
	return &Runtime_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *Runtime_Version_Call) Run(run func()) *Runtime_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Runtime_Version_Call) Return(s string) *Runtime_Version_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Runtime_Version_Call) RunAndReturn(run func() string) *Runtime_Version_Call {
	_c.Call.Return(run)
	return _c
}
