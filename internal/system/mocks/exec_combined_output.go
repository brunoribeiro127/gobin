// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewExecCombinedOutput creates a new instance of ExecCombinedOutput. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecCombinedOutput(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecCombinedOutput {
	mock := &ExecCombinedOutput{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ExecCombinedOutput is an autogenerated mock type for the ExecCombinedOutput type
type ExecCombinedOutput struct {
	mock.Mock
}

type ExecCombinedOutput_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecCombinedOutput) EXPECT() *ExecCombinedOutput_Expecter {
	return &ExecCombinedOutput_Expecter{mock: &_m.Mock}
}

// CombinedOutput provides a mock function for the type ExecCombinedOutput
func (_mock *ExecCombinedOutput) CombinedOutput() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CombinedOutput")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecCombinedOutput_CombinedOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CombinedOutput'
type ExecCombinedOutput_CombinedOutput_Call struct {
	*mock.Call
}

// CombinedOutput is a helper method to define mock.On call
func (_e *ExecCombinedOutput_Expecter) CombinedOutput() *ExecCombinedOutput_CombinedOutput_Call {
	return &ExecCombinedOutput_CombinedOutput_Call{Call: _e.mock.On("CombinedOutput")}
}

func (_c *ExecCombinedOutput_CombinedOutput_Call) Run(run func()) *ExecCombinedOutput_CombinedOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecCombinedOutput_CombinedOutput_Call) Return(bytes []byte, err error) *ExecCombinedOutput_CombinedOutput_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *ExecCombinedOutput_CombinedOutput_Call) RunAndReturn(run func() ([]byte, error)) *ExecCombinedOutput_CombinedOutput_Call {
	_c.Call.Return(run)
	return _c
}
