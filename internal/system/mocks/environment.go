// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewEnvironment creates a new instance of Environment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnvironment(t interface {
	mock.TestingT
	Cleanup(func())
}) *Environment {
	mock := &Environment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Environment is an autogenerated mock type for the Environment type
type Environment struct {
	mock.Mock
}

type Environment_Expecter struct {
	mock *mock.Mock
}

func (_m *Environment) EXPECT() *Environment_Expecter {
	return &Environment_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type Environment
func (_mock *Environment) Get(key string) (string, bool) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// Environment_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Environment_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *Environment_Expecter) Get(key interface{}) *Environment_Get_Call {
	return &Environment_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Environment_Get_Call) Run(run func(key string)) *Environment_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Environment_Get_Call) Return(s string, b bool) *Environment_Get_Call {
	_c.Call.Return(s, b)
	return _c
}

func (_c *Environment_Get_Call) RunAndReturn(run func(key string) (string, bool)) *Environment_Get_Call {
	_c.Call.Return(run)
	return _c
}

// UserHomeDir provides a mock function for the type Environment
func (_mock *Environment) UserHomeDir() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserHomeDir")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Environment_UserHomeDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserHomeDir'
type Environment_UserHomeDir_Call struct {
	*mock.Call
}

// UserHomeDir is a helper method to define mock.On call
func (_e *Environment_Expecter) UserHomeDir() *Environment_UserHomeDir_Call {
	return &Environment_UserHomeDir_Call{Call: _e.mock.On("UserHomeDir")}
}

func (_c *Environment_UserHomeDir_Call) Run(run func()) *Environment_UserHomeDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Environment_UserHomeDir_Call) Return(s string, err error) *Environment_UserHomeDir_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Environment_UserHomeDir_Call) RunAndReturn(run func() (string, error)) *Environment_UserHomeDir_Call {
	_c.Call.Return(run)
	return _c
}
