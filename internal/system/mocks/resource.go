// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewResource creates a new instance of Resource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResource(t interface {
	mock.TestingT
	Cleanup(func())
}) *Resource {
	mock := &Resource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Resource is an autogenerated mock type for the Resource type
type Resource struct {
	mock.Mock
}

type Resource_Expecter struct {
	mock *mock.Mock
}

func (_m *Resource) EXPECT() *Resource_Expecter {
	return &Resource_Expecter{mock: &_m.Mock}
}

// Open provides a mock function for the type Resource
func (_mock *Resource) Open(ctx context.Context, resource string) error {
	ret := _mock.Called(ctx, resource)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, resource)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Resource_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type Resource_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - ctx context.Context
//   - resource string
func (_e *Resource_Expecter) Open(ctx interface{}, resource interface{}) *Resource_Open_Call {
	return &Resource_Open_Call{Call: _e.mock.On("Open", ctx, resource)}
}

func (_c *Resource_Open_Call) Run(run func(ctx context.Context, resource string)) *Resource_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Resource_Open_Call) Return(err error) *Resource_Open_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Resource_Open_Call) RunAndReturn(run func(ctx context.Context, resource string) error) *Resource_Open_Call {
	_c.Call.Return(run)
	return _c
}
