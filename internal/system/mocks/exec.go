// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/brunoribeiro127/gobin/internal/system"
	mock "github.com/stretchr/testify/mock"
)

// NewExec creates a new instance of Exec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExec(t interface {
	mock.TestingT
	Cleanup(func())
}) *Exec {
	mock := &Exec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Exec is an autogenerated mock type for the Exec type
type Exec struct {
	mock.Mock
}

type Exec_Expecter struct {
	mock *mock.Mock
}

func (_m *Exec) EXPECT() *Exec_Expecter {
	return &Exec_Expecter{mock: &_m.Mock}
}

// CombinedOutput provides a mock function for the type Exec
func (_mock *Exec) CombinedOutput(ctx context.Context, name string, args ...string) system.ExecCombinedOutput {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, name, args)
	} else {
		tmpRet = _mock.Called(ctx, name)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CombinedOutput")
	}

	var r0 system.ExecCombinedOutput
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...string) system.ExecCombinedOutput); ok {
		r0 = returnFunc(ctx, name, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(system.ExecCombinedOutput)
		}
	}
	return r0
}

// Exec_CombinedOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CombinedOutput'
type Exec_CombinedOutput_Call struct {
	*mock.Call
}

// CombinedOutput is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - args ...string
func (_e *Exec_Expecter) CombinedOutput(ctx interface{}, name interface{}, args ...interface{}) *Exec_CombinedOutput_Call {
	return &Exec_CombinedOutput_Call{Call: _e.mock.On("CombinedOutput",
		append([]interface{}{ctx, name}, args...)...)}
}

func (_c *Exec_CombinedOutput_Call) Run(run func(ctx context.Context, name string, args ...string)) *Exec_CombinedOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		var variadicArgs []string
		if len(args) > 2 {
			variadicArgs = args[2].([]string)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Exec_CombinedOutput_Call) Return(execCombinedOutput system.ExecCombinedOutput) *Exec_CombinedOutput_Call {
	_c.Call.Return(execCombinedOutput)
	return _c
}

func (_c *Exec_CombinedOutput_Call) RunAndReturn(run func(ctx context.Context, name string, args ...string) system.ExecCombinedOutput) *Exec_CombinedOutput_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type Exec
func (_mock *Exec) Run(ctx context.Context, name string, args ...string) system.ExecRun {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, name, args)
	} else {
		tmpRet = _mock.Called(ctx, name)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 system.ExecRun
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...string) system.ExecRun); ok {
		r0 = returnFunc(ctx, name, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(system.ExecRun)
		}
	}
	return r0
}

// Exec_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Exec_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - args ...string
func (_e *Exec_Expecter) Run(ctx interface{}, name interface{}, args ...interface{}) *Exec_Run_Call {
	return &Exec_Run_Call{Call: _e.mock.On("Run",
		append([]interface{}{ctx, name}, args...)...)}
}

func (_c *Exec_Run_Call) Run(run func(ctx context.Context, name string, args ...string)) *Exec_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		var variadicArgs []string
		if len(args) > 2 {
			variadicArgs = args[2].([]string)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Exec_Run_Call) Return(execRun system.ExecRun) *Exec_Run_Call {
	_c.Call.Return(execRun)
	return _c
}

func (_c *Exec_Run_Call) RunAndReturn(run func(ctx context.Context, name string, args ...string) system.ExecRun) *Exec_Run_Call {
	_c.Call.Return(run)
	return _c
}
